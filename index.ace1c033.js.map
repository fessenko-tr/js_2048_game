{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,E,I,E,I,A,W,M,A,U,wI,G,C,S,E,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,CCEA,IAAM,EAAO,CACX,SAAU,SAAS,aAAa,CAAC,UACjC,WAAY,SAAS,gBAAgB,CAAC,eACtC,UAAW,SAAS,gBAAgB,CAAC,cACrC,aAAc,SAAS,aAAa,CAAC,kBACrC,YAAa,SAAS,aAAa,CAAC,iBACpC,WAAY,SAAS,aAAa,CAAC,gBACnC,MAAO,SAAS,aAAa,CAAC,cAChC,EAQM,EAAe,SAArB,CAAA,MA+DmB,EAPT,EAwCA,EAAY,EAEd,EAIA,EAsCA,EA7EW,EA/DK,EAAA,GAAA,CA0DtB,CAFQ,EAAa,EAAb,QAAR,EAES,SAAS,CAAC,MAAM,CAAC,SAC1B,EAAS,SAAS,CAAC,GAAG,CAAC,WACvB,EAAS,WAAW,CAAG,UAoCf,EAA0B,EAA1B,UAAA,CAAY,EAAc,EAAd,SAApB,CAMM,EAAmB,CAJnB,EAAO,AAAc,cAhCX,GAgC0B,AAAc,eAhCxC,EAiCX,EAAG,GACJ,AAiEN,SAA4B,CAAU,EAMpC,IAAK,IANyB,EAAJ,A,C,A,C,S,C,E,G,M,O,C,G,O,C,C,EAAA,I,EAAA,I,EAAA,I,A,W,M,A,U,6I,G,EAAA,KAAA,CAAC,GAErB,EAAU,EAAM,MAAM,CADV,EAGZ,EAAe,EAAE,CAEd,EAAM,EAAG,EALA,EAKiB,IAAO,CAGxC,IAAK,IAFC,EAAW,EAAE,CAEV,EAAM,EAAG,EAAM,EAAS,IAAO,CACtC,IAAM,EAAQ,AATA,EASA,EAAkB,EAEhC,EAAS,IAAI,CAAC,CAAK,CAAC,EAAM,CAC5B,CAEA,EAAa,IAAI,CAAC,CAAE,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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_array(arr) {\n    return _array_with_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_rest();\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar refs = {\n    startBtn: document.querySelector(\".start\"),\n    fieldCells: document.querySelectorAll(\".field-cell\"),\n    fieldRows: document.querySelectorAll(\".field-row\"),\n    messageStart: document.querySelector(\".message-start\"),\n    messageLose: document.querySelector(\".message-lose\"),\n    messageWin: document.querySelector(\".message-win\"),\n    score: document.querySelector(\".game-score\")\n};\nvar WIN_VALUE = 2048;\nvar FIELD_LENGTH = 15;\nvar NEW_CELL_VALUE = 2;\nvar RARE_NEW_CELL_VALUE = 4;\nvar RARE_CELL_CHANCE = 10;\nvar inputHandler = function(param) {\n    var key = param.key;\n    moveCells(key);\n};\nrefs.startBtn.addEventListener(\"click\", newGame);\nfunction newGame() {\n    resetField();\n    addCell(getRadomCell(), getToken());\n    addCell(getRadomCell(), getToken());\n    window.addEventListener(\"keydown\", inputHandler);\n}\nfunction getRadomCell() {\n    if (!hasFreeSpace()) return -1;\n    var randomCell = getRandomNum(FIELD_LENGTH);\n    while(refs.fieldCells[randomCell].textContent !== \"\")randomCell = getRandomNum(FIELD_LENGTH);\n    return randomCell;\n}\nfunction getToken() {\n    return getRandomNum(100) <= RARE_CELL_CHANCE ? RARE_NEW_CELL_VALUE : NEW_CELL_VALUE;\n}\nfunction getRandomNum(maxVal) {\n    return Math.floor(Math.random() * (maxVal + 1));\n}\nfunction hasFreeSpace() {\n    return _to_consumable_array(refs.fieldCells).some(function(cell) {\n        return cell.textContent === \"\";\n    });\n}\nfunction resetField() {\n    var messageStart = refs.messageStart, messageLose = refs.messageLose, messageWin = refs.messageWin, score = refs.score, fieldCells = refs.fieldCells;\n    score.textContent = \"0\";\n    [\n        messageStart,\n        messageLose,\n        messageWin\n    ].forEach(function(param) {\n        var classList = param.classList;\n        return classList.add(\"hidden\");\n    });\n    fieldCells.forEach(function(cell) {\n        cell.classList.remove(cell.classList[1]);\n        cell.textContent = \"\";\n    });\n}\nfunction updateStartButton() {\n    var startBtn = refs.startBtn;\n    startBtn.classList.remove(\"start\");\n    startBtn.classList.add(\"restart\");\n    startBtn.textContent = \"Restart\";\n}\nfunction moveCells(keyPressed) {\n    updateStartButton();\n    !rearrangeCells(keyPressed) && addCell(getRadomCell(), getToken());\n    !hasFreeSpace() && !hasPossibleMoves() && finishGame(refs.messageLose);\n}\nfunction addCell(cellPosition, cellValue) {\n    if (cellPosition === -1) return;\n    var fieldCells = refs.fieldCells;\n    fieldCells[cellPosition].classList.add(\"field-cell--\".concat(cellValue));\n    fieldCells[cellPosition].textContent = cellValue;\n}\nfunction finishGame(endGameMessage) {\n    endGameMessage.classList.remove(\"hidden\");\n    window.removeEventListener(\"keydown\", inputHandler);\n}\nfunction updateScore(points) {\n    var score = refs.score;\n    var currentPoints = +score.textContent;\n    score.textContent = currentPoints + points;\n}\nfunction rearrangeCells(direction) {\n    var fieldCells = refs.fieldCells, fieldRows = refs.fieldRows;\n    var rows = direction === \"ArrowLeft\" || direction === \"ArrowRight\" ? _to_consumable_array(fieldRows) : createFieldColumns(fieldCells);\n    var initialRowValues = rows.map(function(row) {\n        return _to_consumable_array(row.children).map(function(cel) {\n            return cel.textContent;\n        });\n    }).flat();\n    rows.forEach(function(row) {\n        var initialCells = direction === \"ArrowLeft\" || direction === \"ArrowUp\" ? _to_consumable_array(row.children) : _to_consumable_array(row.children).reverse();\n        var filledCellsValues = initialCells.filter(function(cell) {\n            return cell.textContent !== \"\";\n        }).map(function(param) {\n            var textContent = param.textContent;\n            return textContent;\n        });\n        filledCellsValues.forEach(function(cell, i) {\n            if (filledCellsValues[i - 1] !== undefined && filledCellsValues[i - 1] === filledCellsValues[i]) {\n                updateScore(+filledCellsValues[i] + +filledCellsValues[i - 1]);\n                filledCellsValues[i - 1] = +filledCellsValues[i] + +filledCellsValues[i - 1];\n                filledCellsValues.splice(i, 1);\n            }\n        });\n        var updatedCells = direction === \"ArrowLeft\" || direction === \"ArrowUp\" ? _to_consumable_array(filledCellsValues).concat([\n            \"\",\n            \"\",\n            \"\",\n            \"\"\n        ]).slice(0, 4) : _to_consumable_array(filledCellsValues).concat([\n            \"\",\n            \"\",\n            \"\",\n            \"\"\n        ]).slice(0, 4).reverse();\n        _to_consumable_array(row.children).forEach(function(cell, i2) {\n            var cellValue = updatedCells[i2];\n            cell.textContent = cellValue;\n            cell.classList[1] && cell.classList.remove(cell.classList[1]);\n            +cellValue === WIN_VALUE && finishGame(refs.messageWin);\n            cellValue && cell.classList.add(\"field-cell--\".concat(cellValue));\n        });\n    });\n    var finalRowValues = rows.map(function(row) {\n        return _to_consumable_array(row.children).map(function(cel) {\n            return cel.textContent;\n        });\n    }).flat();\n    return JSON.stringify(initialRowValues) === JSON.stringify(finalRowValues);\n}\nfunction hasPossibleMoves() {\n    var fieldRows = refs.fieldRows;\n    for(var i = 0; i < fieldRows.length; i++)for(var i2 = 0; i2 < fieldRows[i].children.length; i2++){\n        var cell = fieldRows[i].children[i2];\n        if (fieldRows[i].children[i2 + 1] && cell.textContent === fieldRows[i].children[i2 + 1].textContent || fieldRows[i + 1] && cell.textContent === fieldRows[i + 1].children[i2].textContent) return true;\n    }\n    return false;\n}\nfunction createFieldColumns(param) {\n    var _param = _to_array(param), cells = _param.slice(0);\n    var rowsCount = 4;\n    var numCols = cells.length / rowsCount;\n    var fieldColumns = [];\n    for(var row = 0; row < rowsCount; row++){\n        var children = [];\n        for(var col = 0; col < numCols; col++){\n            var index = col * rowsCount + row;\n            children.push(cells[index]);\n        }\n        fieldColumns.push({\n            children: children\n        });\n    }\n    return fieldColumns;\n}\n\n//# sourceMappingURL=index.ace1c033.js.map\n","'use strict';\n\nconst refs = {\n  startBtn: document.querySelector('.start'),\n  fieldCells: document.querySelectorAll('.field-cell'),\n  fieldRows: document.querySelectorAll('.field-row'),\n  messageStart: document.querySelector('.message-start'),\n  messageLose: document.querySelector('.message-lose'),\n  messageWin: document.querySelector('.message-win'),\n  score: document.querySelector('.game-score'),\n};\n\nconst WIN_VALUE = 2048;\nconst FIELD_LENGTH = 15;\nconst NEW_CELL_VALUE = 2;\nconst RARE_NEW_CELL_VALUE = 4;\nconst RARE_CELL_CHANCE = 10;\n\nconst inputHandler = ({ key }) => {\n  moveCells(key);\n};\n\nrefs.startBtn.addEventListener('click', newGame);\n\nfunction newGame() {\n  resetField();\n  addCell(getRadomCell(), getToken());\n  addCell(getRadomCell(), getToken());\n  window.addEventListener('keydown', inputHandler);\n}\n\nfunction getRadomCell() {\n  if (!hasFreeSpace()) {\n    return -1;\n  }\n\n  let randomCell = getRandomNum(FIELD_LENGTH);\n\n  while (refs.fieldCells[randomCell].textContent !== '') {\n    randomCell = getRandomNum(FIELD_LENGTH);\n  }\n\n  return randomCell;\n};\n\nfunction getToken() {\n  return getRandomNum(100) <= RARE_CELL_CHANCE\n    ? RARE_NEW_CELL_VALUE\n    : NEW_CELL_VALUE;\n}\n\nfunction getRandomNum(maxVal) {\n  return Math.floor(Math.random() * (maxVal + 1));\n}\n\nfunction hasFreeSpace() {\n  return [...refs.fieldCells].some(cell => cell.textContent === '');\n}\n\nfunction resetField() {\n  const { messageStart, messageLose, messageWin, score, fieldCells } = refs;\n\n  score.textContent = '0';\n\n  [messageStart, messageLose, messageWin]\n    .forEach(({ classList }) => classList.add('hidden'));\n\n  fieldCells.forEach(cell => {\n    cell.classList.remove(cell.classList[1]);\n    cell.textContent = '';\n  });\n}\n\nfunction updateStartButton() {\n  const { startBtn } = refs;\n\n  startBtn.classList.remove('start');\n  startBtn.classList.add('restart');\n  startBtn.textContent = 'Restart';\n};\n\nfunction moveCells(keyPressed) {\n  updateStartButton();\n\n  !rearrangeCells(keyPressed) && addCell(getRadomCell(), getToken());\n\n  (!hasFreeSpace() && !hasPossibleMoves())\n    && finishGame(refs.messageLose);\n}\n\nfunction addCell(cellPosition, cellValue) {\n  if (cellPosition === -1) {\n    return;\n  }\n\n  const { fieldCells } = refs;\n\n  fieldCells[cellPosition].classList.add(`field-cell--${cellValue}`);\n  fieldCells[cellPosition].textContent = cellValue;\n}\n\nfunction finishGame(endGameMessage) {\n  endGameMessage.classList.remove('hidden');\n  window.removeEventListener('keydown', inputHandler);\n}\n\nfunction updateScore(points) {\n  const { score } = refs;\n  const currentPoints = +(score.textContent);\n\n  score.textContent = currentPoints + points;\n}\n\nfunction rearrangeCells(direction) {\n  const { fieldCells, fieldRows } = refs;\n\n  const rows = direction === 'ArrowLeft' || direction === 'ArrowRight'\n    ? [...fieldRows]\n    : createFieldColumns(fieldCells);\n\n  const initialRowValues = rows.map(row => [...row.children]\n    .map(cel => cel.textContent)).flat();\n\n  rows.forEach((row) => {\n    const initialCells = direction === 'ArrowLeft' || direction === 'ArrowUp'\n      ? [...row.children]\n      : [...row.children].reverse();\n\n    const filledCellsValues = initialCells\n      .filter(cell => cell.textContent !== '')\n      .map(({ textContent }) => textContent);\n\n    filledCellsValues.forEach((cell, i) => {\n      if (filledCellsValues[i - 1] !== undefined\n        && filledCellsValues[i - 1] === filledCellsValues[i]) {\n        updateScore(+filledCellsValues[i] + (+filledCellsValues[i - 1]));\n\n        filledCellsValues[i - 1]\n          = +filledCellsValues[i] + (+filledCellsValues[i - 1]);\n\n        filledCellsValues.splice(i, 1);\n      }\n    });\n\n    const updatedCells = direction === 'ArrowLeft' || direction === 'ArrowUp'\n      ? [...filledCellsValues, '', '', '', ''].slice(0, 4)\n      : [...filledCellsValues, '', '', '', ''].slice(0, 4).reverse();\n\n    [...row.children].forEach((cell, i2) => {\n      const cellValue = updatedCells[i2];\n\n      cell.textContent = cellValue;\n      cell.classList[1] && cell.classList.remove(cell.classList[1]);\n      +cellValue === WIN_VALUE && finishGame(refs.messageWin);\n      cellValue && cell.classList.add(`field-cell--${cellValue}`);\n    });\n  });\n\n  const finalRowValues = rows.map(row => [...row.children]\n    .map(cel => cel.textContent)).flat();\n\n  return JSON.stringify(initialRowValues) === JSON.stringify(finalRowValues);\n}\n\nfunction hasPossibleMoves() {\n  const { fieldRows } = refs;\n\n  for (let i = 0; i < fieldRows.length; i++) {\n    for (let i2 = 0; i2 < fieldRows[i].children.length; i2++) {\n      const cell = fieldRows[i].children[i2];\n\n      if ((fieldRows[i].children[i2 + 1]\n        && cell.textContent === fieldRows[i].children[i2 + 1].textContent)\n        || (fieldRows[i + 1]\n          && cell.textContent === fieldRows[i + 1].children[i2].textContent)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction createFieldColumns([...cells]) {\n  const rowsCount = 4;\n  const numCols = cells.length / rowsCount;\n\n  const fieldColumns = [];\n\n  for (let row = 0; row < rowsCount; row++) {\n    const children = [];\n\n    for (let col = 0; col < numCols; col++) {\n      const index = col * rowsCount + row;\n\n      children.push(cells[index]);\n    }\n\n    fieldColumns.push({ children });\n  }\n\n  return fieldColumns;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_iterable_to_array","iter","Symbol","iterator","from","_to_consumable_array","_array_without_holes","isArray","_unsupported_iterable_to_array","_non_iterable_spread","TypeError","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","refs","startBtn","document","querySelector","fieldCells","querySelectorAll","fieldRows","messageStart","messageLose","messageWin","score","inputHandler","param","keyPressed","rows","initialRowValues","finalRowValues","key","classList","remove","add","textContent","direction","createFieldColumns","cells","_param","_array_with_holes","_non_iterable_rest","numCols","fieldColumns","row","children","col","index","push","map","cel","flat","forEach","filledCellsValues","initialCells","reverse","filter","cell","undefined","points","currentPoints","splice","updatedCells","concat","i2","cellValue","finishGame","JSON","stringify","addCell","getRadomCell","getToken","hasFreeSpace","hasPossibleMoves","randomCell","getRandomNum","maxVal","Math","floor","random","some","cellPosition","endGameMessage","window","removeEventListener","addEventListener"],"version":3,"file":"index.ace1c033.js.map"}