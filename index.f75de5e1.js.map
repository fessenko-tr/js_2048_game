{"mappings":"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","sources":["src/scripts/main.js"],"sourcesContent":["'use strict';\n\nconst refs = {\n  startBtn: document.querySelector('.start'),\n  fieldCells: document.querySelectorAll('.field-cell'),\n  fieldRows: document.querySelectorAll('.field-row'),\n  messageStart: document.querySelector('.message-start'),\n  messageLose: document.querySelector('.message-lose'),\n  messageWin: document.querySelector('.message-win'),\n  score: document.querySelector('.game-score'),\n};\n\nconst WIN_VALUE = 2048;\nconst FIELD_LENGTH = 15;\nconst NEW_CELL_VALUE = 2;\nconst RARE_NEW_CELL_VALUE = 4;\nconst RARE_CELL_CHANCE = 10;\n\nconst inputHandler = ({ key }) => {\n  moveCells(key);\n};\n\nrefs.startBtn.addEventListener('click', newGame);\n\nfunction newGame() {\n  resetField();\n  addCell(getRadomCell(), getToken());\n  addCell(getRadomCell(), getToken());\n  window.addEventListener('keydown', inputHandler);\n}\n\nfunction getRadomCell() {\n  if (!hasFreeSpace()) {\n    return -1;\n  }\n\n  let randomCell = getRandomNum(FIELD_LENGTH);\n\n  while (refs.fieldCells[randomCell].textContent !== '') {\n    randomCell = getRandomNum(FIELD_LENGTH);\n  }\n\n  return randomCell;\n};\n\nfunction getToken() {\n  return getRandomNum(100) <= RARE_CELL_CHANCE\n    ? RARE_NEW_CELL_VALUE\n    : NEW_CELL_VALUE;\n}\n\nfunction getRandomNum(maxVal) {\n  return Math.floor(Math.random() * (maxVal + 1));\n}\n\nfunction hasFreeSpace() {\n  return [...refs.fieldCells].some(cell => cell.textContent === '');\n}\n\nfunction resetField() {\n  const { messageStart, messageLose, messageWin, score, fieldCells } = refs;\n\n  score.textContent = '0';\n\n  [messageStart, messageLose, messageWin]\n    .forEach(({ classList }) => classList.add('hidden'));\n\n  fieldCells.forEach(cell => {\n    cell.classList.remove(cell.classList[1]);\n    cell.textContent = '';\n  });\n}\n\nfunction updateStartButton() {\n  const { startBtn } = refs;\n\n  startBtn.classList.remove('start');\n  startBtn.classList.add('restart');\n  startBtn.textContent = 'Restart';\n};\n\nfunction moveCells(keyPressed) {\n  updateStartButton();\n\n  !rearrangeCells(keyPressed) && addCell(getRadomCell(), getToken());\n\n  (!hasFreeSpace() && !hasPossibleMoves())\n    && finishGame(refs.messageLose);\n}\n\nfunction addCell(cellPosition, cellValue) {\n  if (cellPosition === -1) {\n    return;\n  }\n\n  const { fieldCells } = refs;\n\n  fieldCells[cellPosition].classList.add(`field-cell--${cellValue}`);\n  fieldCells[cellPosition].textContent = cellValue;\n}\n\nfunction finishGame(endGameMessage) {\n  endGameMessage.classList.remove('hidden');\n  window.removeEventListener('keydown', inputHandler);\n}\n\nfunction updateScore(points) {\n  const { score } = refs;\n  const currentPoints = +(score.textContent);\n\n  score.textContent = currentPoints + points;\n}\n\nfunction rearrangeCells(direction) {\n  const { fieldCells, fieldRows } = refs;\n\n  const rows = direction === 'ArrowLeft' || direction === 'ArrowRight'\n    ? [...fieldRows]\n    : createFieldColumns(fieldCells);\n\n  const initialRowValues = rows.map(row => [...row.children]\n    .map(cel => cel.textContent)).flat();\n\n  rows.forEach((row) => {\n    const initialCells = direction === 'ArrowLeft' || direction === 'ArrowUp'\n      ? [...row.children]\n      : [...row.children].reverse();\n\n    const filledCellsValues = initialCells\n      .filter(cell => cell.textContent !== '')\n      .map(({ textContent }) => textContent);\n\n    filledCellsValues.forEach((cell, i) => {\n      if (filledCellsValues[i - 1] !== undefined\n        && filledCellsValues[i - 1] === filledCellsValues[i]) {\n        updateScore(+filledCellsValues[i] + (+filledCellsValues[i - 1]));\n\n        filledCellsValues[i - 1]\n          = +filledCellsValues[i] + (+filledCellsValues[i - 1]);\n\n        filledCellsValues.splice(i, 1);\n      }\n    });\n\n    const updatedCells = direction === 'ArrowLeft' || direction === 'ArrowUp'\n      ? [...filledCellsValues, '', '', '', ''].slice(0, 4)\n      : [...filledCellsValues, '', '', '', ''].slice(0, 4).reverse();\n\n    [...row.children].forEach((cell, i2) => {\n      const cellValue = updatedCells[i2];\n\n      cell.textContent = cellValue;\n      cell.classList[1] && cell.classList.remove(cell.classList[1]);\n      +cellValue === WIN_VALUE && finishGame(refs.messageWin);\n      cellValue && cell.classList.add(`field-cell--${cellValue}`);\n    });\n  });\n\n  const finalRowValues = rows.map(row => [...row.children]\n    .map(cel => cel.textContent)).flat();\n\n  return JSON.stringify(initialRowValues) === JSON.stringify(finalRowValues);\n}\n\nfunction hasPossibleMoves() {\n  const { fieldRows } = refs;\n\n  for (let i = 0; i < fieldRows.length; i++) {\n    for (let i2 = 0; i2 < fieldRows[i].children.length; i2++) {\n      const cell = fieldRows[i].children[i2];\n\n      if ((fieldRows[i].children[i2 + 1]\n        && cell.textContent === fieldRows[i].children[i2 + 1].textContent)\n        || (fieldRows[i + 1]\n          && cell.textContent === fieldRows[i + 1].children[i2].textContent)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction createFieldColumns([...cells]) {\n  const rowsCount = 4;\n  const numCols = cells.length / rowsCount;\n\n  const fieldColumns = [];\n\n  for (let row = 0; row < rowsCount; row++) {\n    const children = [];\n\n    for (let col = 0; col < numCols; col++) {\n      const index = col * rowsCount + row;\n\n      children.push(cells[index]);\n    }\n\n    fieldColumns.push({ children });\n  }\n\n  return fieldColumns;\n}\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}